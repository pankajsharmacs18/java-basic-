import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.function.*;
import java.util.regex.*;
import java.util.stream.*;
import static java.util.stream.Collectors.joining;
import static java.util.stream.Collectors.toList;

class Result {

    /*
     * Complete the 'minimumNumber' function below.
     *
     * The function is expected to return an INTEGER.
     * The function accepts following parameters:
     *  1. INTEGER n
     *  2. STRING password
     */

    public static int minimumNumber(int n, String password)
     {
        String special_characters = "!@#$%^&*()-+";
        int c=0,s=0,l=0,u=0,m=0;
        
        for(int i=0;i<n;i++)
        {
            if((password.charAt(i)>='0' && password.charAt(i)<='9') && m==0)
            {
                m++;
            }
            else if((password.charAt(i)>='a' && password.charAt(i)<='z') && l==0)
            {
                l++;
            }
            else if((password.charAt(i)>='A' && password.charAt(i)<='Z')&& u==0)
            {
                u++;
            }
        else if(special_characters.contains(String.valueOf(password.charAt(i))) && s==0)
        {
            s++;
        }
        else 
        continue;
        }
        c=4-(l+u+m+s);
        if(n+c<6)
        {
            return 6-n;
        }
        else
        return c;
    // Return the minimum number of characters to make the password strong

    }

}

public class Solution {
    public static void main(String[] args) throws IOException {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        int n = Integer.parseInt(bufferedReader.readLine().trim());

        String password = bufferedReader.readLine();

        int answer = Result.minimumNumber(n, password);

        bufferedWriter.write(String.valueOf(answer));
        bufferedWriter.newLine();

        bufferedReader.close();
        bufferedWriter.close();
    }
}
